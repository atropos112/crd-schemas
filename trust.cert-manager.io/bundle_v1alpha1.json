{
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "Desired state of the Bundle resource.",
      "properties": {
        "sources": {
          "description": "Sources is a set of references to data whose data will sync to the target.",
          "items": {
            "description": "BundleSource is the set of sources whose data will be appended and synced to the BundleTarget in all Namespaces.",
            "properties": {
              "configMap": {
                "description": "ConfigMap is a reference to a ConfigMap's `data` key, in the trust Namespace.",
                "properties": {
                  "key": {
                    "description": "Key is the key of the entry in the object's `data` field to be used.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the source object in the trust Namespace.",
                    "type": "string"
                  }
                },
                "required": [
                  "key",
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "inLine": {
                "description": "InLine is a simple string to append as the source data.",
                "type": "string"
              },
              "secret": {
                "description": "Secret is a reference to a Secrets's `data` key, in the trust Namespace.",
                "properties": {
                  "key": {
                    "description": "Key is the key of the entry in the object's `data` field to be used.",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name is the name of the source object in the trust Namespace.",
                    "type": "string"
                  }
                },
                "required": [
                  "key",
                  "name"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "useDefaultCAs": {
                "description": "UseDefaultCAs, when true, requests the default CA bundle to be used as a source. Default CAs are available if trust-manager was installed via Helm or was otherwise set up to include a package-injecting init container by using the \"--default-package-location\" flag when starting the trust-manager controller. If default CAs were not configured at start-up, any request to use the default CAs will fail. The version of the default CA package which is used for a Bundle is stored in the defaultCAPackageVersion field of the Bundle's status field.",
                "type": "boolean"
              }
            },
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "target": {
          "description": "Target is the target location in all namespaces to sync source data to.",
          "properties": {
            "additionalFormats": {
              "description": "AdditionalFormats specifies any additional formats to write to the target",
              "properties": {
                "jks": {
                  "description": "KeySelector is a reference to a key for some map data object.",
                  "properties": {
                    "key": {
                      "description": "Key is the key of the entry in the object's `data` field to be used.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "configMap": {
              "description": "ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.",
              "properties": {
                "key": {
                  "description": "Key is the key of the entry in the object's `data` field to be used.",
                  "type": "string"
                }
              },
              "required": [
                "key"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "namespaceSelector": {
              "description": "NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.",
              "properties": {
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels matches on the set of labels that must be present on a Namespace for the Bundle target to be synced there.",
                  "type": "object"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "sources",
        "target"
      ],
      "type": "object",
      "additionalProperties": false
    },
    "status": {
      "description": "Status of the Bundle. This is set and managed automatically.",
      "properties": {
        "conditions": {
          "description": "List of status conditions to indicate the status of the Bundle. Known condition types are `Bundle`.",
          "items": {
            "description": "BundleCondition contains condition information for a Bundle.",
            "properties": {
              "lastTransitionTime": {
                "description": "LastTransitionTime is the timestamp corresponding to the last status change of this condition.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "Message is a human readable description of the details of the last transition, complementing reason.",
                "type": "string"
              },
              "observedGeneration": {
                "description": "If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Bundle.",
                "format": "int64",
                "type": "integer"
              },
              "reason": {
                "description": "Reason is a brief machine readable explanation for the condition's last transition.",
                "type": "string"
              },
              "status": {
                "description": "Status of the condition, one of ('True', 'False', 'Unknown').",
                "type": "string"
              },
              "type": {
                "description": "Type of the condition, known values are (`Synced`).",
                "type": "string"
              }
            },
            "required": [
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array"
        },
        "defaultCAVersion": {
          "description": "DefaultCAPackageVersion, if set and non-empty, indicates the version information which was retrieved when the set of default CAs was requested in the bundle source. This should only be set if useDefaultCAs was set to \"true\" on a source, and will be the same for the same version of a bundle with identical certificates.",
          "type": "string"
        },
        "target": {
          "description": "Target is the current Target that the Bundle is attempting or has completed syncing the source data to.",
          "properties": {
            "additionalFormats": {
              "description": "AdditionalFormats specifies any additional formats to write to the target",
              "properties": {
                "jks": {
                  "description": "KeySelector is a reference to a key for some map data object.",
                  "properties": {
                    "key": {
                      "description": "Key is the key of the entry in the object's `data` field to be used.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "key"
                  ],
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "type": "object",
              "additionalProperties": false
            },
            "configMap": {
              "description": "ConfigMap is the target ConfigMap in Namespaces that all Bundle source data will be synced to.",
              "properties": {
                "key": {
                  "description": "Key is the key of the entry in the object's `data` field to be used.",
                  "type": "string"
                }
              },
              "required": [
                "key"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "namespaceSelector": {
              "description": "NamespaceSelector will, if set, only sync the target resource in Namespaces which match the selector.",
              "properties": {
                "matchLabels": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "description": "MatchLabels matches on the set of labels that must be present on a Namespace for the Bundle target to be synced there.",
                  "type": "object"
                }
              },
              "type": "object",
              "additionalProperties": false
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
